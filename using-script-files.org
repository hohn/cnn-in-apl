* Misc
    - Load
      #+BEGIN_SRC dyalog
         ]load '/Users/hohn/tmp/apl/cnn-in-apl/cnn.dyalog'
         ⍝ or
         ⎕SE.SALT.Load '/Users/hohn/tmp/apl/cnn-in-apl/cnn.dyalog'

         cnn
         ⍝ #.cnn
         cnn.main
         ⍝ #.cnn . ∇main 
      #+END_SRC

    - Run functions in workspace.  Use Ctrl-Enter to single-step.
      #+BEGIN_SRC dyalog
         ⎕IO ← 0
         ]box on

         ⎕SE.SALT.Load '/Users/hohn/tmp/apl/cnn-in-apl/cnn.dyalog'
         cnn.main 0
      #+END_SRC
      
    - Display argument vector indices with shapes
      #+BEGIN_SRC dyalog
        (⍴ ¨ ⍵),[0.5](⍳12)
      #+END_SRC

    - Guards provide dfns with support for basic flow control.[2] This is a
      multiline dfn with a conditional result:
      #+BEGIN_SRC dyalog
      root←{
          ⍺=0:0         ⍝ return zero if zeroth root
          ⍵*÷⍺          ⍝ result
      }
      #+END_SRC

    - split strings via the [[https://aplwiki.com/wiki/Train#3-trains][3-train]]
      #+BEGIN_SRC dyalog
        ','(≠⊆⊢)'abc,123,X'
      #+END_SRC
      to get
      #+BEGIN_SRC text
        ┌───┬───┬─┐
        │abc│123│X│
        └───┴───┴─┘
      #+END_SRC

    - trains:
      https://aplwiki.com/wiki/Tacit_programming#Debugging

    - Shyness

      By default, functions in APL will print their result to the session log even
      without using ⎕← unless their results are shy. Shy results are declared by
      putting curly braces around the result name (for example {result}←left
      Function right). Assignment (name←array) exhibits the same behaviour as a
      shy function in that, by default, no result is printed when the function
      terminates, but attempting to use the result still succeeds.

    - In Dyalog APL, NARS2000, ngn/apl, and dzaima/APL ∇ represents the current
      dfn, or the function derived from the current dop, such that anonymous
      functions and operators may recurse.[2]

    - When you edit or trace a function, you normally have a blank column to the
      left of the function body, as shown in Fig. 6.13. If this is not the case,
      activate the menu option “View” ⇨ “Stop” (or “Stops”, depending on the
      IDE).  From [[https://mastering.dyalog.com/First-Aid-Kit.html#breakpoints-and-trace-controls][here]].

    - You can query the current directory setting using the following command:
      :     ⎕SE.SALT.Settings 'workdir'

    - Set it
      :     ⎕SE.SALT.Settings 'workdir /Users/hohn/tmp/apl/cnn-in-apl'

    - Code lines
      #+BEGIN_SRC sh 
        egrep -v '⍝|^[ \t]*$' cnn.dyalog |wc -l
        #     112
      #+END_SRC

    - Save
      :     ]save
      :     {R}←{X}⎕SAVE Y
      If X is 0, the workspace is saved without any state indicator in effect. The
      effect is the same as if you first executed =)RESET= and then =)SAVE=. In
      this case, when the workspace is subsequently loaded, the value of the
      latent expression (=⎕LX=) is honoured if applicable.

    - Workspace available is identified by the system constant
      :     ⎕WA

    - Settings
      #+BEGIN_SRC dyalog
        ⎕IO ← 0
        ]box on
      #+END_SRC

    - Version 15.0 added support to the interpreter:
      #+BEGIN_SRC dyalog
        2 ⎕FIX 'file://filename.dyalog'
        )ed file://filename.dyalog
      #+END_SRC

    - Once your application is working as you want, enter set the ⎕LX (Latent
      eXpression) variable to a statement that starts your application and then
      closes APL when done, e.g.
      :     ⎕LX←'myApp.Run ⋄ ⎕OFF'.

      Next, save your application as a workspace with
      :     )save /tmp/myapp.

      You should now be able to run your application with
      :     dyalog -hello=world /tmp/myapp
      etc. You can of course put this in a shell script for ease of
      use.

    - Data import / export
      https://help.dyalog.com/latest/index.htm#Language/System%20Functions/csv.htm?Highlight=csv   
      - Monadic ⎕CSV imports data from a CSV file or converts data from CSV format to
        an internal format.

      - Dyadic ⎕CSV exports data to a CSV file or converts data from internal format
        to a CSV format.

* Using Script Files
** A script
   #+BEGIN_SRC dyalog
     :Namespace Simple

     Nested←'My name is Bond' 0 0 7
     ...
   #+END_SRC

** Loading a Script into the Session

To demonstrate how SALT can use this Script, let us work in a clear workspace.

:       )clear
clear ws

Then we can load the contents of our file, using the Load function of SALT, like
this:

:       Path←'d:\MyFiles\'
:       ⎕←⎕SE.SALT.Load Path,'DemoScript'
#.Simple



The function returns, as a Shy result, the name of the Namespace just created
(Simple).

:       Simple.⎕nl ¯2
Airports Nested RounDefault

:       Simple.⎕nl ¯3
CloseRound Plus Primes Round

:       17 Simple.Plus 23
40

:       ⎕PATH←'Simple'
1 Round 75.218 34.963 55.467
75.2 35 55.5


** Direct script execution
   : dyalogscript args.apls   
